name: Continuous Deployment

on:
  release:
    types: [created]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VM
        env:
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USER: ${{ secrets.VM_USER }}
          DOCKER_IMAGE_NAME: common-assessment-tool
          DOCKER_CONTAINER_NAME: common-assessment-tool-container
          APP_PORT: 8000
          GITHUB_REPOSITORY: ${{ github.repository }}
          RELEASE_TAG: ${{ github.event.release.tag_name }}
        run: |
          # Create a deployment script with proper cleanup
          cat > deploy.sh << 'EOL'
          #!/bin/bash
          set -ex
          
          # Get release tag from GitHub
          RELEASE_TAG=${RELEASE_TAG}
          echo "Deploying release: $RELEASE_TAG"
          
          # Kill any existing uvicorn processes on port 8000
          echo "Checking for and killing stray uvicorn processes on port 8000..."
          UVICORN_PID=$(sudo lsof -i :8000 -t || true)
          if [ ! -z "$UVICORN_PID" ]; then
            sudo kill -9 $UVICORN_PID
            echo "Killed uvicorn process with PID $UVICORN_PID"
            sleep 2
          fi
          
          # Create app directory if it doesn't exist
          mkdir -p ~/app
          cd ~/app
          
          # Clean previous deployment
          if [ -d "./repo" ]; then
            echo "Updating existing repository..."
            cd ./repo
            git fetch origin
            git checkout $RELEASE_TAG
          else
            echo "Cloning fresh repository..."
            git clone --branch $RELEASE_TAG https://github.com/${GITHUB_REPOSITORY} ./repo
            cd ./repo
          fi
          
          # Debug: List files to verify Dockerfile exists
          echo "Files in repository directory:"
          ls -la
          
          # Verify Dockerfile exists
          if [ ! -f "Dockerfile" ]; then
            echo "ERROR: Dockerfile not found!"
            exit 1
          fi
          
          # Stop and remove previous container if it exists
          echo "Stopping existing container..."
          docker stop ${DOCKER_CONTAINER_NAME} || true
          docker rm ${DOCKER_CONTAINER_NAME} || true
          
          # Build new image
          echo "Building new Docker image..."
          docker build -t ${DOCKER_IMAGE_NAME}:${RELEASE_TAG} .
          docker tag ${DOCKER_IMAGE_NAME}:${RELEASE_TAG} ${DOCKER_IMAGE_NAME}:latest
          
          # Start new container
          echo "Starting new container..."
          docker run -d \
            --name ${DOCKER_CONTAINER_NAME} \
            -p ${APP_PORT}:${APP_PORT} \
            --restart unless-stopped \
            ${DOCKER_IMAGE_NAME}:latest
          
          # Check if container started successfully
          if docker ps | grep ${DOCKER_CONTAINER_NAME}; then
            echo "Container deployed successfully!"
          else
            echo "Container failed to start"
            exit 1
          fi
          EOL
          
          # Copy deploy script to VM
          scp -i ~/.ssh/id_rsa deploy.sh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:~/deploy.sh
          
          # Execute deploy script on VM
          ssh -i ~/.ssh/id_rsa ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "chmod +x ~/deploy.sh && DOCKER_CONTAINER_NAME=$DOCKER_CONTAINER_NAME DOCKER_IMAGE_NAME=$DOCKER_IMAGE_NAME APP_PORT=$APP_PORT GITHUB_REPOSITORY=$GITHUB_REPOSITORY RELEASE_TAG=$RELEASE_TAG bash ~/deploy.sh"